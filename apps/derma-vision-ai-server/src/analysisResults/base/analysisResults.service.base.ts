/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AnalysisResults as PrismaAnalysisResults,
  Images as PrismaImages,
} from "@prisma/client";

export class AnalysisResultsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AnalysisResultsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.analysisResults.count(args);
  }

  async analysisResultsItems(
    args: Prisma.AnalysisResultsFindManyArgs
  ): Promise<PrismaAnalysisResults[]> {
    return this.prisma.analysisResults.findMany(args);
  }
  async analysisResults(
    args: Prisma.AnalysisResultsFindUniqueArgs
  ): Promise<PrismaAnalysisResults | null> {
    return this.prisma.analysisResults.findUnique(args);
  }
  async createAnalysisResults(
    args: Prisma.AnalysisResultsCreateArgs
  ): Promise<PrismaAnalysisResults> {
    return this.prisma.analysisResults.create(args);
  }
  async updateAnalysisResults(
    args: Prisma.AnalysisResultsUpdateArgs
  ): Promise<PrismaAnalysisResults> {
    return this.prisma.analysisResults.update(args);
  }
  async deleteAnalysisResults(
    args: Prisma.AnalysisResultsDeleteArgs
  ): Promise<PrismaAnalysisResults> {
    return this.prisma.analysisResults.delete(args);
  }

  async getImage(parentId: string): Promise<PrismaImages | null> {
    return this.prisma.analysisResults
      .findUnique({
        where: { id: parentId },
      })
      .image();
  }
}
