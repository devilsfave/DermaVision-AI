/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GoogleGeminiResults } from "./GoogleGeminiResults";
import { GoogleGeminiResultsCountArgs } from "./GoogleGeminiResultsCountArgs";
import { GoogleGeminiResultsFindManyArgs } from "./GoogleGeminiResultsFindManyArgs";
import { GoogleGeminiResultsFindUniqueArgs } from "./GoogleGeminiResultsFindUniqueArgs";
import { CreateGoogleGeminiResultsArgs } from "./CreateGoogleGeminiResultsArgs";
import { UpdateGoogleGeminiResultsArgs } from "./UpdateGoogleGeminiResultsArgs";
import { DeleteGoogleGeminiResultsArgs } from "./DeleteGoogleGeminiResultsArgs";
import { Images } from "../../images/base/Images";
import { GoogleGeminiResultsService } from "../googleGeminiResults.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GoogleGeminiResults)
export class GoogleGeminiResultsResolverBase {
  constructor(
    protected readonly service: GoogleGeminiResultsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GoogleGeminiResults",
    action: "read",
    possession: "any",
  })
  async _googleGeminiResultsItemsMeta(
    @graphql.Args() args: GoogleGeminiResultsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GoogleGeminiResults])
  @nestAccessControl.UseRoles({
    resource: "GoogleGeminiResults",
    action: "read",
    possession: "any",
  })
  async googleGeminiResultsItems(
    @graphql.Args() args: GoogleGeminiResultsFindManyArgs
  ): Promise<GoogleGeminiResults[]> {
    return this.service.googleGeminiResultsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GoogleGeminiResults, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GoogleGeminiResults",
    action: "read",
    possession: "own",
  })
  async googleGeminiResults(
    @graphql.Args() args: GoogleGeminiResultsFindUniqueArgs
  ): Promise<GoogleGeminiResults | null> {
    const result = await this.service.googleGeminiResults(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GoogleGeminiResults)
  @nestAccessControl.UseRoles({
    resource: "GoogleGeminiResults",
    action: "create",
    possession: "any",
  })
  async createGoogleGeminiResults(
    @graphql.Args() args: CreateGoogleGeminiResultsArgs
  ): Promise<GoogleGeminiResults> {
    return await this.service.createGoogleGeminiResults({
      ...args,
      data: {
        ...args.data,

        image: args.data.image
          ? {
              connect: args.data.image,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GoogleGeminiResults)
  @nestAccessControl.UseRoles({
    resource: "GoogleGeminiResults",
    action: "update",
    possession: "any",
  })
  async updateGoogleGeminiResults(
    @graphql.Args() args: UpdateGoogleGeminiResultsArgs
  ): Promise<GoogleGeminiResults | null> {
    try {
      return await this.service.updateGoogleGeminiResults({
        ...args,
        data: {
          ...args.data,

          image: args.data.image
            ? {
                connect: args.data.image,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GoogleGeminiResults)
  @nestAccessControl.UseRoles({
    resource: "GoogleGeminiResults",
    action: "delete",
    possession: "any",
  })
  async deleteGoogleGeminiResults(
    @graphql.Args() args: DeleteGoogleGeminiResultsArgs
  ): Promise<GoogleGeminiResults | null> {
    try {
      return await this.service.deleteGoogleGeminiResults(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Images, {
    nullable: true,
    name: "image",
  })
  @nestAccessControl.UseRoles({
    resource: "Images",
    action: "read",
    possession: "any",
  })
  async getImage(
    @graphql.Parent() parent: GoogleGeminiResults
  ): Promise<Images | null> {
    const result = await this.service.getImage(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
