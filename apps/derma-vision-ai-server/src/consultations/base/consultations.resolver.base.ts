/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Consultations } from "./Consultations";
import { ConsultationsCountArgs } from "./ConsultationsCountArgs";
import { ConsultationsFindManyArgs } from "./ConsultationsFindManyArgs";
import { ConsultationsFindUniqueArgs } from "./ConsultationsFindUniqueArgs";
import { CreateConsultationsArgs } from "./CreateConsultationsArgs";
import { UpdateConsultationsArgs } from "./UpdateConsultationsArgs";
import { DeleteConsultationsArgs } from "./DeleteConsultationsArgs";
import { ConsultationsService } from "../consultations.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Consultations)
export class ConsultationsResolverBase {
  constructor(
    protected readonly service: ConsultationsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Consultations",
    action: "read",
    possession: "any",
  })
  async _consultationsItemsMeta(
    @graphql.Args() args: ConsultationsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Consultations])
  @nestAccessControl.UseRoles({
    resource: "Consultations",
    action: "read",
    possession: "any",
  })
  async consultationsItems(
    @graphql.Args() args: ConsultationsFindManyArgs
  ): Promise<Consultations[]> {
    return this.service.consultationsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Consultations, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Consultations",
    action: "read",
    possession: "own",
  })
  async consultations(
    @graphql.Args() args: ConsultationsFindUniqueArgs
  ): Promise<Consultations | null> {
    const result = await this.service.consultations(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Consultations)
  @nestAccessControl.UseRoles({
    resource: "Consultations",
    action: "create",
    possession: "any",
  })
  async createConsultations(
    @graphql.Args() args: CreateConsultationsArgs
  ): Promise<Consultations> {
    return await this.service.createConsultations({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Consultations)
  @nestAccessControl.UseRoles({
    resource: "Consultations",
    action: "update",
    possession: "any",
  })
  async updateConsultations(
    @graphql.Args() args: UpdateConsultationsArgs
  ): Promise<Consultations | null> {
    try {
      return await this.service.updateConsultations({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Consultations)
  @nestAccessControl.UseRoles({
    resource: "Consultations",
    action: "delete",
    possession: "any",
  })
  async deleteConsultations(
    @graphql.Args() args: DeleteConsultationsArgs
  ): Promise<Consultations | null> {
    try {
      return await this.service.deleteConsultations(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
