/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ImagesService } from "../images.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ImagesCreateInput } from "./ImagesCreateInput";
import { Images } from "./Images";
import { ImagesFindManyArgs } from "./ImagesFindManyArgs";
import { ImagesWhereUniqueInput } from "./ImagesWhereUniqueInput";
import { ImagesUpdateInput } from "./ImagesUpdateInput";
import { AnalysisResultsFindManyArgs } from "../../analysisResults/base/AnalysisResultsFindManyArgs";
import { AnalysisResults } from "../../analysisResults/base/AnalysisResults";
import { AnalysisResultsWhereUniqueInput } from "../../analysisResults/base/AnalysisResultsWhereUniqueInput";
import { GoogleGeminiResultsFindManyArgs } from "../../googleGeminiResults/base/GoogleGeminiResultsFindManyArgs";
import { GoogleGeminiResults } from "../../googleGeminiResults/base/GoogleGeminiResults";
import { GoogleGeminiResultsWhereUniqueInput } from "../../googleGeminiResults/base/GoogleGeminiResultsWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ImagesControllerBase {
  constructor(
    protected readonly service: ImagesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Images })
  @nestAccessControl.UseRoles({
    resource: "Images",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createImages(@common.Body() data: ImagesCreateInput): Promise<Images> {
    return await this.service.createImages({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        imageUrl: true,
        analysisStatus: true,
        uploadedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Images] })
  @ApiNestedQuery(ImagesFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Images",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async imagesItems(@common.Req() request: Request): Promise<Images[]> {
    const args = plainToClass(ImagesFindManyArgs, request.query);
    return this.service.imagesItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        imageUrl: true,
        analysisStatus: true,
        uploadedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Images })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Images",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async images(
    @common.Param() params: ImagesWhereUniqueInput
  ): Promise<Images | null> {
    const result = await this.service.images({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        imageUrl: true,
        analysisStatus: true,
        uploadedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Images })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Images",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateImages(
    @common.Param() params: ImagesWhereUniqueInput,
    @common.Body() data: ImagesUpdateInput
  ): Promise<Images | null> {
    try {
      return await this.service.updateImages({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          imageUrl: true,
          analysisStatus: true,
          uploadedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Images })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Images",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteImages(
    @common.Param() params: ImagesWhereUniqueInput
  ): Promise<Images | null> {
    try {
      return await this.service.deleteImages({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          imageUrl: true,
          analysisStatus: true,
          uploadedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/analysisResultsItems")
  @ApiNestedQuery(AnalysisResultsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AnalysisResults",
    action: "read",
    possession: "any",
  })
  async findAnalysisResultsItems(
    @common.Req() request: Request,
    @common.Param() params: ImagesWhereUniqueInput
  ): Promise<AnalysisResults[]> {
    const query = plainToClass(AnalysisResultsFindManyArgs, request.query);
    const results = await this.service.findAnalysisResultsItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        result: true,

        image: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/analysisResultsItems")
  @nestAccessControl.UseRoles({
    resource: "Images",
    action: "update",
    possession: "any",
  })
  async connectAnalysisResultsItems(
    @common.Param() params: ImagesWhereUniqueInput,
    @common.Body() body: AnalysisResultsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      analysisResultsItems: {
        connect: body,
      },
    };
    await this.service.updateImages({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/analysisResultsItems")
  @nestAccessControl.UseRoles({
    resource: "Images",
    action: "update",
    possession: "any",
  })
  async updateAnalysisResultsItems(
    @common.Param() params: ImagesWhereUniqueInput,
    @common.Body() body: AnalysisResultsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      analysisResultsItems: {
        set: body,
      },
    };
    await this.service.updateImages({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/analysisResultsItems")
  @nestAccessControl.UseRoles({
    resource: "Images",
    action: "update",
    possession: "any",
  })
  async disconnectAnalysisResultsItems(
    @common.Param() params: ImagesWhereUniqueInput,
    @common.Body() body: AnalysisResultsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      analysisResultsItems: {
        disconnect: body,
      },
    };
    await this.service.updateImages({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/googleGeminiResultsItems")
  @ApiNestedQuery(GoogleGeminiResultsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "GoogleGeminiResults",
    action: "read",
    possession: "any",
  })
  async findGoogleGeminiResultsItems(
    @common.Req() request: Request,
    @common.Param() params: ImagesWhereUniqueInput
  ): Promise<GoogleGeminiResults[]> {
    const query = plainToClass(GoogleGeminiResultsFindManyArgs, request.query);
    const results = await this.service.findGoogleGeminiResultsItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        geminiResult: true,

        image: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/googleGeminiResultsItems")
  @nestAccessControl.UseRoles({
    resource: "Images",
    action: "update",
    possession: "any",
  })
  async connectGoogleGeminiResultsItems(
    @common.Param() params: ImagesWhereUniqueInput,
    @common.Body() body: GoogleGeminiResultsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      googleGeminiResultsItems: {
        connect: body,
      },
    };
    await this.service.updateImages({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/googleGeminiResultsItems")
  @nestAccessControl.UseRoles({
    resource: "Images",
    action: "update",
    possession: "any",
  })
  async updateGoogleGeminiResultsItems(
    @common.Param() params: ImagesWhereUniqueInput,
    @common.Body() body: GoogleGeminiResultsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      googleGeminiResultsItems: {
        set: body,
      },
    };
    await this.service.updateImages({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/googleGeminiResultsItems")
  @nestAccessControl.UseRoles({
    resource: "Images",
    action: "update",
    possession: "any",
  })
  async disconnectGoogleGeminiResultsItems(
    @common.Param() params: ImagesWhereUniqueInput,
    @common.Body() body: GoogleGeminiResultsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      googleGeminiResultsItems: {
        disconnect: body,
      },
    };
    await this.service.updateImages({
      where: params,
      data,
      select: { id: true },
    });
  }
}
