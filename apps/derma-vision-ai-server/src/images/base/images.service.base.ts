/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Images as PrismaImages,
  AnalysisResults as PrismaAnalysisResults,
  GoogleGeminiResults as PrismaGoogleGeminiResults,
  User as PrismaUser,
} from "@prisma/client";

export class ImagesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ImagesCountArgs, "select">): Promise<number> {
    return this.prisma.images.count(args);
  }

  async imagesItems(args: Prisma.ImagesFindManyArgs): Promise<PrismaImages[]> {
    return this.prisma.images.findMany(args);
  }
  async images(
    args: Prisma.ImagesFindUniqueArgs
  ): Promise<PrismaImages | null> {
    return this.prisma.images.findUnique(args);
  }
  async createImages(args: Prisma.ImagesCreateArgs): Promise<PrismaImages> {
    return this.prisma.images.create(args);
  }
  async updateImages(args: Prisma.ImagesUpdateArgs): Promise<PrismaImages> {
    return this.prisma.images.update(args);
  }
  async deleteImages(args: Prisma.ImagesDeleteArgs): Promise<PrismaImages> {
    return this.prisma.images.delete(args);
  }

  async findAnalysisResultsItems(
    parentId: string,
    args: Prisma.AnalysisResultsFindManyArgs
  ): Promise<PrismaAnalysisResults[]> {
    return this.prisma.images
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .analysisResultsItems(args);
  }

  async findGoogleGeminiResultsItems(
    parentId: string,
    args: Prisma.GoogleGeminiResultsFindManyArgs
  ): Promise<PrismaGoogleGeminiResults[]> {
    return this.prisma.images
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .googleGeminiResultsItems(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.images
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
