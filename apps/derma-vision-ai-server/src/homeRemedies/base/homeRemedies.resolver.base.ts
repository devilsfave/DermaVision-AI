/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { HomeRemedies } from "./HomeRemedies";
import { HomeRemediesCountArgs } from "./HomeRemediesCountArgs";
import { HomeRemediesFindManyArgs } from "./HomeRemediesFindManyArgs";
import { HomeRemediesFindUniqueArgs } from "./HomeRemediesFindUniqueArgs";
import { CreateHomeRemediesArgs } from "./CreateHomeRemediesArgs";
import { UpdateHomeRemediesArgs } from "./UpdateHomeRemediesArgs";
import { DeleteHomeRemediesArgs } from "./DeleteHomeRemediesArgs";
import { HomeRemediesService } from "../homeRemedies.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => HomeRemedies)
export class HomeRemediesResolverBase {
  constructor(
    protected readonly service: HomeRemediesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "HomeRemedies",
    action: "read",
    possession: "any",
  })
  async _homeRemediesItemsMeta(
    @graphql.Args() args: HomeRemediesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [HomeRemedies])
  @nestAccessControl.UseRoles({
    resource: "HomeRemedies",
    action: "read",
    possession: "any",
  })
  async homeRemediesItems(
    @graphql.Args() args: HomeRemediesFindManyArgs
  ): Promise<HomeRemedies[]> {
    return this.service.homeRemediesItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => HomeRemedies, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HomeRemedies",
    action: "read",
    possession: "own",
  })
  async homeRemedies(
    @graphql.Args() args: HomeRemediesFindUniqueArgs
  ): Promise<HomeRemedies | null> {
    const result = await this.service.homeRemedies(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HomeRemedies)
  @nestAccessControl.UseRoles({
    resource: "HomeRemedies",
    action: "create",
    possession: "any",
  })
  async createHomeRemedies(
    @graphql.Args() args: CreateHomeRemediesArgs
  ): Promise<HomeRemedies> {
    return await this.service.createHomeRemedies({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HomeRemedies)
  @nestAccessControl.UseRoles({
    resource: "HomeRemedies",
    action: "update",
    possession: "any",
  })
  async updateHomeRemedies(
    @graphql.Args() args: UpdateHomeRemediesArgs
  ): Promise<HomeRemedies | null> {
    try {
      return await this.service.updateHomeRemedies({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HomeRemedies)
  @nestAccessControl.UseRoles({
    resource: "HomeRemedies",
    action: "delete",
    possession: "any",
  })
  async deleteHomeRemedies(
    @graphql.Args() args: DeleteHomeRemediesArgs
  ): Promise<HomeRemedies | null> {
    try {
      return await this.service.deleteHomeRemedies(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
