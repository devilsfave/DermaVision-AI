/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AnalysisResultService } from "../analysisResult.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AnalysisResultCreateInput } from "./AnalysisResultCreateInput";
import { AnalysisResult } from "./AnalysisResult";
import { AnalysisResultFindManyArgs } from "./AnalysisResultFindManyArgs";
import { AnalysisResultWhereUniqueInput } from "./AnalysisResultWhereUniqueInput";
import { AnalysisResultUpdateInput } from "./AnalysisResultUpdateInput";
import { ConsultationFindManyArgs } from "../../consultation/base/ConsultationFindManyArgs";
import { Consultation } from "../../consultation/base/Consultation";
import { ConsultationWhereUniqueInput } from "../../consultation/base/ConsultationWhereUniqueInput";
import { ImageFindManyArgs } from "../../image/base/ImageFindManyArgs";
import { Image } from "../../image/base/Image";
import { ImageWhereUniqueInput } from "../../image/base/ImageWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AnalysisResultControllerBase {
  constructor(
    protected readonly service: AnalysisResultService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AnalysisResult })
  @nestAccessControl.UseRoles({
    resource: "AnalysisResult",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAnalysisResult(
    @common.Body() data: AnalysisResultCreateInput
  ): Promise<AnalysisResult> {
    return await this.service.createAnalysisResult({
      data: {
        ...data,

        image: data.image
          ? {
              connect: data.image,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        result: true,

        image: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [AnalysisResult] })
  @ApiNestedQuery(AnalysisResultFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AnalysisResult",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async analysisResults(
    @common.Req() request: Request
  ): Promise<AnalysisResult[]> {
    const args = plainToClass(AnalysisResultFindManyArgs, request.query);
    return this.service.analysisResults({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        result: true,

        image: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AnalysisResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AnalysisResult",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async analysisResult(
    @common.Param() params: AnalysisResultWhereUniqueInput
  ): Promise<AnalysisResult | null> {
    const result = await this.service.analysisResult({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        result: true,

        image: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AnalysisResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AnalysisResult",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAnalysisResult(
    @common.Param() params: AnalysisResultWhereUniqueInput,
    @common.Body() data: AnalysisResultUpdateInput
  ): Promise<AnalysisResult | null> {
    try {
      return await this.service.updateAnalysisResult({
        where: params,
        data: {
          ...data,

          image: data.image
            ? {
                connect: data.image,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          result: true,

          image: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AnalysisResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AnalysisResult",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAnalysisResult(
    @common.Param() params: AnalysisResultWhereUniqueInput
  ): Promise<AnalysisResult | null> {
    try {
      return await this.service.deleteAnalysisResult({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          result: true,

          image: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/consultations")
  @ApiNestedQuery(ConsultationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Consultation",
    action: "read",
    possession: "any",
  })
  async findConsultations(
    @common.Req() request: Request,
    @common.Param() params: AnalysisResultWhereUniqueInput
  ): Promise<Consultation[]> {
    const query = plainToClass(ConsultationFindManyArgs, request.query);
    const results = await this.service.findConsultations(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        date: true,
        description: true,

        user: {
          select: {
            id: true,
          },
        },

        analysisResult: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/consultations")
  @nestAccessControl.UseRoles({
    resource: "AnalysisResult",
    action: "update",
    possession: "any",
  })
  async connectConsultations(
    @common.Param() params: AnalysisResultWhereUniqueInput,
    @common.Body() body: ConsultationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      consultations: {
        connect: body,
      },
    };
    await this.service.updateAnalysisResult({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/consultations")
  @nestAccessControl.UseRoles({
    resource: "AnalysisResult",
    action: "update",
    possession: "any",
  })
  async updateConsultations(
    @common.Param() params: AnalysisResultWhereUniqueInput,
    @common.Body() body: ConsultationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      consultations: {
        set: body,
      },
    };
    await this.service.updateAnalysisResult({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/consultations")
  @nestAccessControl.UseRoles({
    resource: "AnalysisResult",
    action: "update",
    possession: "any",
  })
  async disconnectConsultations(
    @common.Param() params: AnalysisResultWhereUniqueInput,
    @common.Body() body: ConsultationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      consultations: {
        disconnect: body,
      },
    };
    await this.service.updateAnalysisResult({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/images")
  @ApiNestedQuery(ImageFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Image",
    action: "read",
    possession: "any",
  })
  async findImages(
    @common.Req() request: Request,
    @common.Param() params: AnalysisResultWhereUniqueInput
  ): Promise<Image[]> {
    const query = plainToClass(ImageFindManyArgs, request.query);
    const results = await this.service.findImages(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        imagePath: true,
        metadata: true,

        user: {
          select: {
            id: true,
          },
        },

        analysisResult: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/images")
  @nestAccessControl.UseRoles({
    resource: "AnalysisResult",
    action: "update",
    possession: "any",
  })
  async connectImages(
    @common.Param() params: AnalysisResultWhereUniqueInput,
    @common.Body() body: ImageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      images: {
        connect: body,
      },
    };
    await this.service.updateAnalysisResult({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/images")
  @nestAccessControl.UseRoles({
    resource: "AnalysisResult",
    action: "update",
    possession: "any",
  })
  async updateImages(
    @common.Param() params: AnalysisResultWhereUniqueInput,
    @common.Body() body: ImageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      images: {
        set: body,
      },
    };
    await this.service.updateAnalysisResult({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/images")
  @nestAccessControl.UseRoles({
    resource: "AnalysisResult",
    action: "update",
    possession: "any",
  })
  async disconnectImages(
    @common.Param() params: AnalysisResultWhereUniqueInput,
    @common.Body() body: ImageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      images: {
        disconnect: body,
      },
    };
    await this.service.updateAnalysisResult({
      where: params,
      data,
      select: { id: true },
    });
  }
}
